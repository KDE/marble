//
//     Copyright 2009 Simon Edwards <simon@simonzone.com>

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace Marble
{

class AbstractDataPluginModel : QObject /Abstract/
{
%TypeHeaderCode
#include <AbstractDataPluginModel.h>
%End

public:
    QList<Marble::AbstractDataPluginItem*>  whichItemAt (const QPoint& curpos);

protected:
    virtual void            parseFile (const QByteArray& file)=0;
    void                    downloadItemData (const QUrl& url, const QString& type, Marble::AbstractDataPluginItem* item);
    void                    downloadDescriptionFile (const QUrl& url);
    void                    addItemToList (Marble::AbstractDataPluginItem* item);
    QString                 generateFilename (const QString& id, const QString& type) const;
    QString                 generateFilepath (const QString& id, const QString& type) const;
    bool                    fileExists (const QString& fileName) const;
    bool                    fileExists (const QString& id, const QString& type) const;
public:
    virtual ~AbstractDataPluginModel ();
    void                    setItemSettings (QHash<QString,QVariant> itemSettings);
protected:
    Marble::AbstractDataPluginItem*  findItem (const QString& id) const;
    bool                    itemExists (const QString& id) const;
signals:
    void                    itemsUpdated ();
protected:
    virtual void            getAdditionalItems (const Marble::GeoDataLatLonAltBox& box, const Marble::MarbleModel* model, qint32 number = 10)=0;
public:
//ig    explicit                AbstractDataPluginModel (const QString& name, const PluginManager* pluginManager, QObject* parent /TransferThis/ = 0);
    QList<Marble::AbstractDataPluginItem*>  items (const Marble::ViewportParams* viewport, const Marble::MarbleModel* model, qint32 number = 10);
    virtual void            setFavoriteItems (const QStringList& list);
    QStringList             favoriteItems () const;
    virtual void            setFavoriteItemsOnly (bool favoriteOnly);
    bool                    isFavoriteItemsOnly () const;
protected:
    void                    clear ();
signals:
    void                    favoriteItemsChanged (const QStringList& favoriteItems);
public:
    QObject*                favoritesModel ();
    void                    addItemsToList (const QList<Marble::AbstractDataPluginItem*>& items);
protected:
    virtual void            getItem (const QString& id, const Marble::MarbleModel* model);
    void                    registerItemProperties (const QMetaObject& item);
signals:
    void                    favoriteItemsOnlyChanged ();
};
// AbstractDataPluginModel

};
// Marble


