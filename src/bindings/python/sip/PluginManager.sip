// Copyright 2011 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

namespace Marble
{
class PluginManager : QObject
{
%TypeHeaderCode
#include <PluginManager.h>
%End

public:
    explicit                PluginManager (QObject* parent /TransferThis/ = 0);
    ~PluginManager ();
//FIXME
//ig    QList<const Marble::RenderPlugin*>  renderPlugins () const;
    void                    addRenderPlugin (const Marble::RenderPlugin* plugin);
    QList<const Marble::PositionProviderPlugin*>  positionProviderPlugins () const;
    void                    addPositionProviderPlugin (const Marble::PositionProviderPlugin* plugin);
    QList<const Marble::SearchRunnerPlugin*>  searchRunnerPlugins () const;
    void                    addSearchRunnerPlugin (const Marble::SearchRunnerPlugin* plugin);
    QList<const Marble::ReverseGeocodingRunnerPlugin*>  reverseGeocodingRunnerPlugins () const;
    void                    addReverseGeocodingRunnerPlugin (const Marble::ReverseGeocodingRunnerPlugin* plugin);
    QList<Marble::RoutingRunnerPlugin*>  routingRunnerPlugins () const;
    void                    addRoutingRunnerPlugin (Marble::RoutingRunnerPlugin* plugin);
    QList<const Marble::ParseRunnerPlugin*>  parsingRunnerPlugins () const;
    void                    addParseRunnerPlugin (const Marble::ParseRunnerPlugin* plugin);
signals:
    void                    renderPluginsChanged ();
    void                    positionProviderPluginsChanged ();
    void                    searchRunnerPluginsChanged ();
    void                    reverseGeocodingRunnerPluginsChanged ();
    void                    routingRunnerPluginsChanged ();
    void                    parseRunnerPluginsChanged ();
};
};
