//
//     Copyright 2009 Simon Edwards <simon@simonzone.com>

//                 Generated by twine

// This file is part of PyKDE4.

// PyKDE4 is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.

// PyKDE4 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

namespace Marble
{

class PluginInterface /Abstract/
{
%TypeHeaderCode
#include <PluginInterface.h>
%End

public:
    virtual QString         name () const=0;
    virtual QString         nameId () const=0;
    virtual QString         description () const=0;
    virtual QIcon           icon () const=0;
    virtual ~PluginInterface ();
%ConvertToSubClassCode
    // CTSCC for subclasses of 'PluginInterface'
    sipType = NULL;

    if (dynamic_cast<Marble::ParseRunnerPlugin*>(sipCpp))
        sipType = sipType_Marble_ParseRunnerPlugin;
    else if (dynamic_cast<Marble::PositionProviderPluginInterface*>(sipCpp))
        sipType = sipType_Marble_PositionProviderPluginInterface;
    else if (dynamic_cast<Marble::RenderPlugin*>(sipCpp))
        {
        sipType = sipType_Marble_RenderPlugin;
        if (dynamic_cast<Marble::AbstractDataPlugin*>(sipCpp))
            sipType = sipType_Marble_AbstractDataPlugin;
        else if (dynamic_cast<Marble::AbstractFloatItem*>(sipCpp))
            sipType = sipType_Marble_AbstractFloatItem;
        }
    else if (dynamic_cast<Marble::ReverseGeocodingRunnerPlugin*>(sipCpp))
        sipType = sipType_Marble_ReverseGeocodingRunnerPlugin;
    else if (dynamic_cast<Marble::RoutingRunnerPlugin*>(sipCpp))
        sipType = sipType_Marble_RoutingRunnerPlugin;
    else if (dynamic_cast<Marble::SearchRunnerPlugin*>(sipCpp))
        sipType = sipType_Marble_SearchRunnerPlugin;
%End
    virtual QString         version () const=0;
    virtual QString         copyrightYears () const=0;
    virtual QList<Marble::PluginAuthor>  pluginAuthors () const=0;
    virtual QString         aboutDataText () const;
};
// PluginInterface

class PluginAuthor
{
%TypeHeaderCode
#include <PluginInterface.h>
%End

                            PluginAuthor (const QString& name_, const QString& email_, const QString& task_ = QObject::tr("Developer"));
};
};
// Marble


%ModuleHeaderCode
//ctscc
#include <AbstractDataPlugin.h>
#include <AbstractFloatItem.h>
#include <ParseRunnerPlugin.h>
#include <PluginInterface.h>
#include <PositionProviderPluginInterface.h>
#include <RenderPlugin.h>
#include <ReverseGeocodingRunnerPlugin.h>
#include <RoutingRunnerPlugin.h>
#include <SearchRunnerPlugin.h>
%End
