// Copyright 2010 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

namespace Marble
{
class MarbleAbstractRunner : QObject
{
%TypeHeaderCode
#include <MarbleAbstractRunner.h>
%End

public:
    explicit                MarbleAbstractRunner (QObject* parent /TransferThis/ = 0);
    void                    setModel (Marble::MarbleModel* model);
    virtual Marble::GeoDataFeature::GeoDataVisualCategory  category () const;
    virtual void            reverseGeocoding (const Marble::GeoDataCoordinates& coordinates);
signals:
//ig    void                    searchFinished (QVector<Marble::GeoDataPlacemark*> result);
    void                    reverseGeocodingFinished (const Marble::GeoDataCoordinates& coordinates, const Marble::GeoDataPlacemark& placemark);
    void                    routeCalculated (Marble::GeoDataDocument* route);
protected:
    Marble::MarbleModel*    model ();
public:
    virtual void            parseFile (const QString& fileName, Marble::DocumentRole role);
signals:
    void                    parsingFinished (Marble::GeoDataDocument* document, const QString& error = QString());
public:
    virtual void            retrieveRoute (const Marble::RouteRequest* request);
    virtual void            search (const QString& searchTerm, const Marble::GeoDataLatLonAltBox& preferred);
};
};
