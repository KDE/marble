// Copyright 2011 Simon Edwards <simon@simonzone.com>

//                 Generated by twine2

// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU Library General Public License as
// published by the Free Software Foundation; either version 2, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details

// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

namespace Marble
{
class MarbleRunnerManager : QObject /NoDefaultCtors/
{
%TypeHeaderCode
#include <MarbleRunnerManager.h>
%End

public:
    ~MarbleRunnerManager ();
    void                    setModel (Marble::MarbleModel* model);
    void                    findPlacemarks (const QString& searchTerm, const Marble::GeoDataLatLonAltBox& preferred = Marble::GeoDataLatLonAltBox());
    void                    reverseGeocoding (const Marble::GeoDataCoordinates& coordinates);
signals:
    void                    searchResultChanged (QAbstractItemModel* model);
    void                    searchFinished (const QString& searchTerm);
    void                    reverseGeocodingFinished (const Marble::GeoDataCoordinates& coordinates, const Marble::GeoDataPlacemark& placemark);
    void                    routeRetrieved (Marble::GeoDataDocument* route);
public:
//ig    explicit                MarbleRunnerManager (const PluginManager* pluginManager, QObject* parent /TransferThis/ = 0);
//FIXME add QVector<GeoDataPlacemark*> support
signals:
//ig    void                    searchResultChanged (QVector<Marble::GeoDataPlacemark*> result);
    void                    parsingFinished (Marble::GeoDataDocument* document, const QString& error = QString());
public:
    void                    retrieveRoute (const Marble::RouteRequest* request);
// FIXME
//ig    QVector<Marble::GeoDataPlacemark*>  searchPlacemarks (const QString& searchTerm, const Marble::GeoDataLatLonAltBox& preferred = Marble::GeoDataLatLonAltBox());
    QString                 searchReverseGeocoding (const Marble::GeoDataCoordinates& coordinates);
//ig    QVector<Marble::GeoDataDocument*>  searchRoute (const Marble::RouteRequest* request);
    void                    parseFile (const QString& fileName, Marble::DocumentRole role = Marble::UserDocument);
    Marble::GeoDataDocument*  openFile (const QString& fileName, Marble::DocumentRole role = Marble::UserDocument);
signals:
    void                    placemarkSearchFinished ();
    void                    reverseGeocodingFinished ();
    void                    routingFinished ();
    void                    parsingFinished ();
};
};
