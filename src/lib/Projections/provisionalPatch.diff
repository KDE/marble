diff --git a/src/lib/Projections/EquirectProjection.cpp b/src/lib/Projections/EquirectProjection.cpp
index 3216f75..4566d4f 100644
--- a/src/lib/Projections/EquirectProjection.cpp
+++ b/src/lib/Projections/EquirectProjection.cpp
@@ -21,7 +21,7 @@ using namespace Marble;
 
 
 EquirectProjection::EquirectProjection()
-    : AbstractProjection(),
+    : CylindricalProjection(),
       d( 0 )
 {
     setRepeatX( repeatableX() );
@@ -33,10 +33,13 @@ EquirectProjection::~EquirectProjection()
 {
 }
 
+/*
 bool EquirectProjection::repeatableX() const
 {
     return true;
 }
+*/
+
 
 qreal EquirectProjection::maxValidLat() const
 {
@@ -62,7 +65,7 @@ bool EquirectProjection::screenCoordinates( const qreal lon, const qreal lat,
     const qreal centerLat = viewport->centerLatitude();
 
     qreal  rad2Pixel = 2.0 * viewport->radius() / M_PI;
- 
+
     // Let (x, y) be the position on the screen of the point.
     x = ( width  / 2.0 + ( lon - centerLon ) * rad2Pixel );
     y = ( height / 2.0 - ( lat - centerLat ) * rad2Pixel );
@@ -341,6 +344,7 @@ bool EquirectProjection::mapCoversViewport( const ViewportParams *viewport ) con
     return true;
 }
 
+/*
 QPainterPath EquirectProjection::mapShape( const ViewportParams *viewport ) const
 {
     // Convenience variables
@@ -348,12 +352,13 @@ QPainterPath EquirectProjection::mapShape( const ViewportParams *viewport ) cons
     int  width  = viewport->width();
     int  height = viewport->height();
 
-    // Calculate translation of center point
-    const qreal centerLat = viewport->centerLatitude();
+	qreal  yTop; 
+	qreal  yBottom;
+	qreal  xDummy;
 
-    int yCenterOffset = (int)( centerLat * (qreal)( 2 * radius ) / M_PI );
-    int yTop          = height / 2 - radius + yCenterOffset;
-    int yBottom       = yTop + 2 * radius;
+	// Get the top and bottom coordinates of the projected map
+    screenCoordinates( 0.0, maxLat(), viewport, xDummy, yTop );
+    screenCoordinates( 0.0, minLat(), viewport, xDummy, yBottom );
 
     // Don't let the map area be outside the image
     if ( yTop < 0 )
@@ -370,3 +375,4 @@ QPainterPath EquirectProjection::mapShape( const ViewportParams *viewport ) cons
 
     return mapShape;
 }
+*/
diff --git a/src/lib/Projections/EquirectProjection.h b/src/lib/Projections/EquirectProjection.h
index ca22966..dbd990e 100644
--- a/src/lib/Projections/EquirectProjection.h
+++ b/src/lib/Projections/EquirectProjection.h
@@ -22,7 +22,7 @@
  */
 
 
-#include "AbstractProjection.h"
+#include "CylindricalProjection.h"
 
 
 namespace Marble
@@ -34,7 +34,7 @@ class EquirectProjectionPrivate;
  * @short A class to implement the Equirectangular projection used by the "Flat Map" view.
  */
 
-class EquirectProjection : public AbstractProjection
+class EquirectProjection : public CylindricalProjection
 {
     // Not a QObject so far because we don't need to send signals.
  public:
@@ -46,14 +46,17 @@ class EquirectProjection : public AbstractProjection
 
     virtual ~EquirectProjection();
 
-    virtual bool repeatableX() const;
+//    virtual bool repeatableX() const;
     virtual qreal  maxValidLat() const;
     virtual qreal  minValidLat() const;
 
-    virtual bool traversablePoles()  const { return false; }
-    virtual bool traversableDateLine()  const { return false; }
+//    virtual bool traversablePoles()  const { return false; }
+//    virtual bool traversableDateLine()  const { return false; }
+
+
+//    virtual SurfaceType surfaceType() const { return Cylindrical; }
+
 
-    virtual SurfaceType surfaceType() const { return Cylindrical; }
 
     virtual PreservationType preservationType() const { return NoPreservation; }
 
@@ -103,7 +106,7 @@ class EquirectProjection : public AbstractProjection
 
     bool mapCoversViewport( const ViewportParams *viewport ) const;
 
-    virtual QPainterPath mapShape( const ViewportParams *viewport ) const;
+//    virtual QPainterPath mapShape( const ViewportParams *viewport ) const;
 
  private:
     Q_DISABLE_COPY( EquirectProjection )
diff --git a/src/lib/Projections/MercatorProjection.cpp b/src/lib/Projections/MercatorProjection.cpp
index fb63e21..cc21206 100644
--- a/src/lib/Projections/MercatorProjection.cpp
+++ b/src/lib/Projections/MercatorProjection.cpp
@@ -23,7 +23,7 @@
 using namespace Marble;
 
 MercatorProjection::MercatorProjection()
-    : AbstractProjection(),
+    : CylindricalProjection(),
       d( 0 )
 {
     setRepeatX( repeatableX() );
@@ -35,10 +35,13 @@ MercatorProjection::~MercatorProjection()
 {
 }
 
+/*
 bool MercatorProjection::repeatableX() const
 {
     return true;
 }
+*/
+
 
 qreal MercatorProjection::maxValidLat() const
 {
@@ -314,8 +317,7 @@ GeoDataLatLonAltBox MercatorProjection::latLonAltBox( const QRect& screenRect,
         }
     }
     else {
-        // We need a point on the screen at maxLat that definitely
-        // gets displayed:
+        // We need a point on the screen at maxLat that definitely gets displayed:
         qreal averageLatitude = ( latLonAltBox.north() + latLonAltBox.south() ) / 2.0;
     
         GeoDataCoordinates maxLonPoint( +M_PI, averageLatitude, GeoDataCoordinates::Radian );
@@ -359,10 +361,11 @@ bool MercatorProjection::mapCoversViewport( const ViewportParams *viewport ) con
     return true;
 }
 
+/*
 QPainterPath MercatorProjection::mapShape( const ViewportParams *viewport ) const
 {
     // Convenience variables
-    //int  radius = viewport->radius();
+    int  radius = viewport->radius();
     int  width  = viewport->width();
     int  height = viewport->height();
 
@@ -370,11 +373,12 @@ QPainterPath MercatorProjection::mapShape( const ViewportParams *viewport ) cons
     qreal  yBottom;
     qreal  xDummy;
 
-    // Get the top and bottom y coordinates of the projected map.
+    // Get the top and bottom coordinates of the projected map.
     screenCoordinates( 0.0, maxLat(), viewport, xDummy, yTop );
     screenCoordinates( 0.0, minLat(), viewport, xDummy, yBottom );
 
-    if ( yTop < 0 )
+    // Don't let the map area be outside the image
+	if ( yTop < 0 )
         yTop = 0;
     if ( yBottom > height )
         yBottom =  height;
@@ -388,3 +392,5 @@ QPainterPath MercatorProjection::mapShape( const ViewportParams *viewport ) cons
 
     return mapShape;
 }
+*/
+
diff --git a/src/lib/Projections/MercatorProjection.h b/src/lib/Projections/MercatorProjection.h
index 9d1e736..30fbb0a 100644
--- a/src/lib/Projections/MercatorProjection.h
+++ b/src/lib/Projections/MercatorProjection.h
@@ -22,7 +22,7 @@
  */
 
 
-#include "AbstractProjection.h"
+#include "CylindricalProjection.h"
 
 namespace Marble
 {
@@ -33,7 +33,7 @@ class MercatorProjectionPrivate;
  * @short A class to implement the Mercator projection.
  */
 
-class MercatorProjection : public AbstractProjection
+class MercatorProjection : public CylindricalProjection
 {
     // Not a QObject so far because we don't need to send signals.
  public:
@@ -45,14 +45,14 @@ class MercatorProjection : public AbstractProjection
 
     virtual ~MercatorProjection();
 
-    virtual bool repeatableX() const;
+//    virtual bool repeatableX() const;
     virtual qreal  maxValidLat() const;
     virtual qreal  minValidLat() const;
 
-    virtual bool traversablePoles() const { return false; }
-    virtual bool traversableDateLine() const { return false; }
+//    virtual bool traversablePoles() const { return false; }
+//    virtual bool traversableDateLine() const { return false; }
 
-    virtual SurfaceType surfaceType() const { return Cylindrical; }
+//    virtual SurfaceType surfaceType() const { return Cylindrical; }	
 
     virtual PreservationType preservationType() const { return Conformal; }
 
@@ -102,7 +102,7 @@ class MercatorProjection : public AbstractProjection
 
     bool  mapCoversViewport( const ViewportParams *viewport ) const;
 
-    virtual QPainterPath mapShape( const ViewportParams *viewport ) const;
+//    virtual QPainterPath mapShape( const ViewportParams *viewport ) const;
 
  private:
     Q_DISABLE_COPY( MercatorProjection )
